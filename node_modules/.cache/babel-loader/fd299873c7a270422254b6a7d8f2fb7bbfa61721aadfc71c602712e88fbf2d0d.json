{"ast":null,"code":"import _objectSpread from\"C:/Users/SMIC_STUDIO/Desktop/MEHFIL 25 APP/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Utility functions for data storage and retrieval\nexport const saveToLocalStorage=(key,data)=>{try{localStorage.setItem(key,JSON.stringify(data));return true;}catch(error){console.error('Error saving to localStorage:',error);return false;}};export const loadFromLocalStorage=function(key){let defaultValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const item=localStorage.getItem(key);return item?JSON.parse(item):defaultValue;}catch(error){console.error('Error loading from localStorage:',error);return defaultValue;}};// Data migration function for categories\nexport const migrateCategories=()=>{const existingCategories=loadFromLocalStorage('categories');if(!existingCategories||existingCategories.length===0){// Create default categories if none exist\nconst defaultCategories=[{id:1,name:'Sub Junior',order:1},{id:2,name:'Junior',order:2},{id:3,name:'Senior',order:3}];saveToLocalStorage('categories',defaultCategories);return defaultCategories;}return existingCategories;};// Calculate team standings based on results\nexport const calculateTeamStandings=function(teams,results,pointsConfig){let categoryPointsConfig=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};let gradePointsConfig=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};// Initialize medal counts for each team\nconst teamStandings=teams.map(team=>_objectSpread(_objectSpread({},team),{},{gold:0,silver:0,bronze:0,totalPoints:0}));// Process results to count medals and points\nresults.forEach(result=>{result.participants.forEach(participant=>{// Find the student to get their team\nconst students=loadFromLocalStorage('students',[]);const student=students.find(s=>s.chestNumber===participant.name||s.name===participant.name);if(student){// Find the team in standings\nconst teamIndex=teamStandings.findIndex(t=>t.name===student.team);if(teamIndex!==-1){// Extract grade from participant name if it exists\nlet grade='';let participantName=participant.name;// Updated regex to handle more grades (A, B, C, D)\nconst gradeMatch=participant.name.match(/\\(([A-D])\\)$/);if(gradeMatch){grade=gradeMatch[1];participantName=participant.name.replace(/\\s*\\([A-D]\\)$/,'');}// Use grade-specific points if available\nlet categoryPointConfig=pointsConfig;// default\nif(grade&&result.category){const gradeKey=\"\".concat(result.category,\"-\").concat(grade);if(gradePointsConfig[gradeKey]){categoryPointConfig=gradePointsConfig[gradeKey];}else if(categoryPointsConfig[result.category]){// Fall back to category-specific points\ncategoryPointConfig=categoryPointsConfig[result.category];}}else if(categoryPointsConfig[result.category]){// Use category-specific points if no grade specified\ncategoryPointConfig=categoryPointsConfig[result.category];}// Increment medal count based on position\nswitch(participant.position.toLowerCase()){case'1':case'first':case'gold':teamStandings[teamIndex].gold+=1;teamStandings[teamIndex].totalPoints+=categoryPointConfig.gold||pointsConfig.gold||10;break;case'2':case'second':case'silver':teamStandings[teamIndex].silver+=1;teamStandings[teamIndex].totalPoints+=categoryPointConfig.silver||pointsConfig.silver||7;break;case'3':case'third':case'bronze':teamStandings[teamIndex].bronze+=1;teamStandings[teamIndex].totalPoints+=categoryPointConfig.bronze||pointsConfig.bronze||5;break;}}}});});// Sort teams by total points (descending)\nteamStandings.sort((a,b)=>b.totalPoints-a.totalPoints);// Add rank to each team\nteamStandings.forEach((team,index)=>{team.rank=index+1;});return teamStandings;};// Calculate top performers based on points\nexport const calculateTopPerformers=results=>{const performerPoints={};// Aggregate points for each performer\nresults.forEach(result=>{result.participants.forEach(participant=>{if(!performerPoints[participant.name]){performerPoints[participant.name]={name:participant.name,totalPoints:0,programs:[]};}performerPoints[participant.name].totalPoints+=participant.points||0;performerPoints[participant.name].programs.push({program:result.program,position:participant.position,points:participant.points||0});});});// Convert to array and sort by points\nconst performers=Object.values(performerPoints);performers.sort((a,b)=>b.totalPoints-a.totalPoints);// Format for display (top 10)\nreturn performers.slice(0,10).map((performer,index)=>{var _performer$programs$;return{id:index+1,name:performer.name,program:((_performer$programs$=performer.programs[0])===null||_performer$programs$===void 0?void 0:_performer$programs$.program)||'Various',points:performer.totalPoints};});};// Initialize default data if not present\nexport const initializeDefaultData=()=>{// Check if we have initialized data already\nconst isInitialized=loadFromLocalStorage('initialized',false);if(!isInitialized){// Initialize categories\nmigrateCategories();// Initialize other default data\nconst defaultEvents=[{id:1,name:'Dance Competition',categories:['Sub Junior','Junior','Senior'],color:{r:106,g:17,b:203}}];const defaultTeams=[{id:1,name:'Team Alpha',color:'#FF5733'}];const defaultPrograms=[{id:1,name:'Classical Dance',type:'Individual'}];const defaultPoints={gold:10,silver:7,bronze:5};// Set default admin password\nconst defaultAdminPassword='admin123';// Initialize empty team managers array\nconst defaultTeamManagers=[];saveToLocalStorage('events',defaultEvents);saveToLocalStorage('teams',defaultTeams);saveToLocalStorage('programs',defaultPrograms);saveToLocalStorage('points',defaultPoints);saveToLocalStorage('adminPassword',defaultAdminPassword);saveToLocalStorage('categoryPoints',{});// Initialize empty category points\nsaveToLocalStorage('gradePoints',{});// Initialize empty grade points\nsaveToLocalStorage('teamManagers',defaultTeamManagers);// Initialize empty team managers\nsaveToLocalStorage('availableGrades',['A','B','C','D']);saveToLocalStorage('initialized',true);}};","map":{"version":3,"names":["saveToLocalStorage","key","data","localStorage","setItem","JSON","stringify","error","console","loadFromLocalStorage","defaultValue","arguments","length","undefined","item","getItem","parse","migrateCategories","existingCategories","defaultCategories","id","name","order","calculateTeamStandings","teams","results","pointsConfig","categoryPointsConfig","gradePointsConfig","teamStandings","map","team","_objectSpread","gold","silver","bronze","totalPoints","forEach","result","participants","participant","students","student","find","s","chestNumber","teamIndex","findIndex","t","grade","participantName","gradeMatch","match","replace","categoryPointConfig","category","gradeKey","concat","position","toLowerCase","sort","a","b","index","rank","calculateTopPerformers","performerPoints","programs","points","push","program","performers","Object","values","slice","performer","_performer$programs$","initializeDefaultData","isInitialized","defaultEvents","categories","color","r","g","defaultTeams","defaultPrograms","type","defaultPoints","defaultAdminPassword","defaultTeamManagers"],"sources":["C:/Users/SMIC_STUDIO/Desktop/MEHFIL 25 APP/src/utils/dataStorage.js"],"sourcesContent":["// Utility functions for data storage and retrieval\r\n\r\nexport const saveToLocalStorage = (key, data) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error saving to localStorage:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const loadFromLocalStorage = (key, defaultValue = null) => {\r\n  try {\r\n    const item = localStorage.getItem(key);\r\n    return item ? JSON.parse(item) : defaultValue;\r\n  } catch (error) {\r\n    console.error('Error loading from localStorage:', error);\r\n    return defaultValue;\r\n  }\r\n};\r\n\r\n// Data migration function for categories\r\nexport const migrateCategories = () => {\r\n  const existingCategories = loadFromLocalStorage('categories');\r\n  \r\n  if (!existingCategories || existingCategories.length === 0) {\r\n    // Create default categories if none exist\r\n    const defaultCategories = [\r\n      { id: 1, name: 'Sub Junior', order: 1 },\r\n      { id: 2, name: 'Junior', order: 2 },\r\n      { id: 3, name: 'Senior', order: 3 }\r\n    ];\r\n    \r\n    saveToLocalStorage('categories', defaultCategories);\r\n    return defaultCategories;\r\n  }\r\n  \r\n  return existingCategories;\r\n};\r\n\r\n// Calculate team standings based on results\r\nexport const calculateTeamStandings = (teams, results, pointsConfig, categoryPointsConfig = {}, gradePointsConfig = {}) => {\r\n  // Initialize medal counts for each team\r\n  const teamStandings = teams.map(team => ({\r\n    ...team,\r\n    gold: 0,\r\n    silver: 0,\r\n    bronze: 0,\r\n    totalPoints: 0\r\n  }));\r\n  \r\n  // Process results to count medals and points\r\n  results.forEach(result => {\r\n    result.participants.forEach(participant => {\r\n      // Find the student to get their team\r\n      const students = loadFromLocalStorage('students', []);\r\n      const student = students.find(s => \r\n        s.chestNumber === participant.name || \r\n        s.name === participant.name\r\n      );\r\n      \r\n      if (student) {\r\n        // Find the team in standings\r\n        const teamIndex = teamStandings.findIndex(t => t.name === student.team);\r\n        if (teamIndex !== -1) {\r\n          // Extract grade from participant name if it exists\r\n          let grade = '';\r\n          let participantName = participant.name;\r\n          \r\n          // Updated regex to handle more grades (A, B, C, D)\r\n          const gradeMatch = participant.name.match(/\\(([A-D])\\)$/);\r\n          if (gradeMatch) {\r\n            grade = gradeMatch[1];\r\n            participantName = participant.name.replace(/\\s*\\([A-D]\\)$/, '');\r\n          }\r\n          \r\n          // Use grade-specific points if available\r\n          let categoryPointConfig = pointsConfig; // default\r\n          \r\n          if (grade && result.category) {\r\n            const gradeKey = `${result.category}-${grade}`;\r\n            if (gradePointsConfig[gradeKey]) {\r\n              categoryPointConfig = gradePointsConfig[gradeKey];\r\n            } else if (categoryPointsConfig[result.category]) {\r\n              // Fall back to category-specific points\r\n              categoryPointConfig = categoryPointsConfig[result.category];\r\n            }\r\n          } else if (categoryPointsConfig[result.category]) {\r\n            // Use category-specific points if no grade specified\r\n            categoryPointConfig = categoryPointsConfig[result.category];\r\n          }\r\n          \r\n          // Increment medal count based on position\r\n          switch (participant.position.toLowerCase()) {\r\n            case '1':\r\n            case 'first':\r\n            case 'gold':\r\n              teamStandings[teamIndex].gold += 1;\r\n              teamStandings[teamIndex].totalPoints += categoryPointConfig.gold || pointsConfig.gold || 10;\r\n              break;\r\n            case '2':\r\n            case 'second':\r\n            case 'silver':\r\n              teamStandings[teamIndex].silver += 1;\r\n              teamStandings[teamIndex].totalPoints += categoryPointConfig.silver || pointsConfig.silver || 7;\r\n              break;\r\n            case '3':\r\n            case 'third':\r\n            case 'bronze':\r\n              teamStandings[teamIndex].bronze += 1;\r\n              teamStandings[teamIndex].totalPoints += categoryPointConfig.bronze || pointsConfig.bronze || 5;\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });\r\n  \r\n  // Sort teams by total points (descending)\r\n  teamStandings.sort((a, b) => b.totalPoints - a.totalPoints);\r\n  \r\n  // Add rank to each team\r\n  teamStandings.forEach((team, index) => {\r\n    team.rank = index + 1;\r\n  });\r\n  \r\n  return teamStandings;\r\n};\r\n\r\n// Calculate top performers based on points\r\nexport const calculateTopPerformers = (results) => {\r\n  const performerPoints = {};\r\n  \r\n  // Aggregate points for each performer\r\n  results.forEach(result => {\r\n    result.participants.forEach(participant => {\r\n      if (!performerPoints[participant.name]) {\r\n        performerPoints[participant.name] = {\r\n          name: participant.name,\r\n          totalPoints: 0,\r\n          programs: []\r\n        };\r\n      }\r\n      \r\n      performerPoints[participant.name].totalPoints += participant.points || 0;\r\n      performerPoints[participant.name].programs.push({\r\n        program: result.program,\r\n        position: participant.position,\r\n        points: participant.points || 0\r\n      });\r\n    });\r\n  });\r\n  \r\n  // Convert to array and sort by points\r\n  const performers = Object.values(performerPoints);\r\n  performers.sort((a, b) => b.totalPoints - a.totalPoints);\r\n  \r\n  // Format for display (top 10)\r\n  return performers.slice(0, 10).map((performer, index) => ({\r\n    id: index + 1,\r\n    name: performer.name,\r\n    program: performer.programs[0]?.program || 'Various',\r\n    points: performer.totalPoints\r\n  }));\r\n};\r\n\r\n// Initialize default data if not present\r\nexport const initializeDefaultData = () => {\r\n  // Check if we have initialized data already\r\n  const isInitialized = loadFromLocalStorage('initialized', false);\r\n  \r\n  if (!isInitialized) {\r\n    // Initialize categories\r\n    migrateCategories();\r\n    \r\n    // Initialize other default data\r\n    const defaultEvents = [\r\n      { id: 1, name: 'Dance Competition', categories: ['Sub Junior', 'Junior', 'Senior'], color: { r: 106, g: 17, b: 203 } }\r\n    ];\r\n    \r\n    const defaultTeams = [\r\n      { id: 1, name: 'Team Alpha', color: '#FF5733' }\r\n    ];\r\n    \r\n    const defaultPrograms = [\r\n      { id: 1, name: 'Classical Dance', type: 'Individual' }\r\n    ];\r\n    \r\n    const defaultPoints = {\r\n      gold: 10,\r\n      silver: 7,\r\n      bronze: 5\r\n    };\r\n    \r\n    // Set default admin password\r\n    const defaultAdminPassword = 'admin123';\r\n    \r\n    // Initialize empty team managers array\r\n    const defaultTeamManagers = [];\r\n    \r\n    saveToLocalStorage('events', defaultEvents);\r\n    saveToLocalStorage('teams', defaultTeams);\r\n    saveToLocalStorage('programs', defaultPrograms);\r\n    saveToLocalStorage('points', defaultPoints);\r\n    saveToLocalStorage('adminPassword', defaultAdminPassword);\r\n    saveToLocalStorage('categoryPoints', {}); // Initialize empty category points\r\n    saveToLocalStorage('gradePoints', {}); // Initialize empty grade points\r\n    saveToLocalStorage('teamManagers', defaultTeamManagers); // Initialize empty team managers\r\n    saveToLocalStorage('availableGrades', ['A', 'B', 'C', 'D']);\r\n    saveToLocalStorage('initialized', true);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}